#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define WIDTH 30
#define HEIGHT 15
#define MAX_SNAKE 1000

int snakeX[MAX_SNAKE], snakeY[MAX_SNAKE];
int snakeLength;
int fruitX, fruitY;
int dir; 
int score;

int collision_with_self(int x, int y) {
    for (int i = 0; i < snakeLength; ++i)
        if (snakeX[i] == x && snakeY[i] == y) return 1;
    return 0;
}

void place_fruit() {
    int x, y;
    do {
        x = rand() % (WIDTH - 2) + 1;
        y = rand() % (HEIGHT - 2) + 1;
    } while (collision_with_self(x, y));
    fruitX = x; fruitY = y;
}

void init_game() {
    srand((unsigned)time(NULL));
    snakeLength = 3;
    int startX = WIDTH / 2, startY = HEIGHT / 2;
    for (int i = 0; i < snakeLength; ++i) {
        snakeX[i] = startX - i; 
        snakeY[i] = startY;
    }
    dir = 1;
    score = 0;
    place_fruit();
}

void draw() {
   
    printf("\e[1;1H\e[2J");

    for (int y = 0; y < HEIGHT; ++y) {
        for (int x = 0; x < WIDTH; ++x) {
            if (y == 0 || y == HEIGHT - 1 || x == 0 || x == WIDTH - 1) putchar('#');
            else if (x == fruitX && y == fruitY) putchar('*');
            else {
                int printed = 0;
                for (int i = 0; i < snakeLength; ++i) {
                    if (snakeX[i] == x && snakeY[i] == y) {
                        putchar(i == 0 ? 'O' : 'o');
                        printed = 1; break;
                    }
                }
                if (!printed) putchar(' ');
            }
        }
        putchar('\n');
    }
    printf("Score: %d  Length: %d\n", score, snakeLength);
    printf("Enter direction (w/a/s/d) or q to quit: ");
    fflush(stdout);
}

int main() {
    init_game();
    char ch;
    int gameOver = 0;

    while (!gameOver) {
        draw();
        if (scanf(" %c", &ch) != 1) break;
        if (ch == 'q' || ch == 'Q') break;

        int newDir = dir;
        if (ch == 'w' || ch == 'W') newDir = 2;
        else if (ch == 's' || ch == 'S') newDir = 3;
        else if (ch == 'a' || ch == 'A') newDir = 0;
        else if (ch == 'd' || ch == 'D') newDir = 1;

       
        if (!((dir == 0 && newDir == 1) || (dir == 1 && newDir == 0) ||
              (dir == 2 && newDir == 3) || (dir == 3 && newDir == 2))) {
            dir = newDir;
        }

        
        for (int i = snakeLength - 1; i > 0; --i) {
            snakeX[i] = snakeX[i - 1];
            snakeY[i] = snakeY[i - 1];
        }
        
        if (dir == 0) snakeX[0]--;
        else if (dir == 1) snakeX[0]++;
        else if (dir == 2) snakeY[0]--;
        else if (dir == 3) snakeY[0]++;

        
        if (snakeX[0] <= 0 || snakeX[0] >= WIDTH - 1 || snakeY[0] <= 0 || snakeY[0] >= HEIGHT - 1) {
            gameOver = 1; break;
        }
        
        for (int i = 1; i < snakeLength; ++i)
            if (snakeX[0] == snakeX[i] && snakeY[0] == snakeY[i]) { gameOver = 1; break; }
        if (gameOver) break;

       
        if (snakeX[0] == fruitX && snakeY[0] == fruitY) {
            if (snakeLength < MAX_SNAKE) {
                snakeX[snakeLength] = snakeX[snakeLength - 1];
                snakeY[snakeLength] = snakeY[snakeLength - 1];
                snakeLength++;
            }
            score += 10;
            place_fruit();
        }
    }

    printf("\nGame Over! Final score: %d\n", score);
    return 0;
}
